// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  firstName    String
  lastName     String
  businessName String?
  phoneNumber  String?
  email        String @unique
  password     String
  verified     Boolean @default(false)  // Default to true since we are skipping verification
  totpSecret   String
  stores       Store[]
}

model Store {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  shopifyName String
  accessToken String
  lastSync   DateTime @default(now())
  syncing     Boolean      @default(false)
  userId      String       @db.ObjectId
  user        User         @relation(fields: [userId], references: [id])
  orders      Order[]
  products    Product[]
  metrics     Metric[]
  currency    String
  storeUrl    String
  industry    String
  netSalesGoal Int      @default(0)
  adSpendGoal  Int      @default(0)
  customerOrderHistory CustomerOrderHistory[]
}

model CustomerOrderHistory {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  customerId  String
  shopId      String    @db.ObjectId    
  store       Store     @relation(fields: [shopId], references: [id])
  orderDates  DateTime[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([customerId, shopId])
}


model Order {
  id               String     @id @default(auto()) @map("_id") @db.ObjectId
  date             DateTime
  orderId          String
  source           String
  customer         String
  customerId       String
  fulfillmentStatus String
  paid             Float
  tax              Float
  shippingCost     Float
  shippingPaid     Float
  shippingRegion   String
  shippingCountry  String
  discount         Float
  grossProfit      Float
  cogs             Float
  storeId          String     @db.ObjectId
  store            Store      @relation(fields: [storeId], references: [id])
  lineItems        LineItem[]
}

model LineItem {
  id               String @id @default(auto()) @map("_id") @db.ObjectId
  lineItemId       String
  productId         String
  variantId       String
  name             String
  quantity         Int
  paid             Float
  discount         Float
  productCost      Float
  preTaxGrossProfit Float
  preTaxGrossMargin Float
  orderId          String @db.ObjectId
  order            Order @relation(fields: [orderId], references: [id])
}

model Product {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  productId  String   @unique
  title      String
  storeId    String   @db.ObjectId
  store      Store    @relation(fields: [storeId], references: [id])
  variants   Variant[]
}

model Variant {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  variantId         String   @unique
  title             String
  price             Float
  inventoryQuantity Int
  productId         String   @db.ObjectId
  product           Product  @relation(fields: [productId], references: [id])
}

model Metric {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  shopId       String   @db.ObjectId
  date         DateTime 
  metricType   String
  value        Float
  description  String
  store        Store    @relation(fields: [shopId], references: [id])
  @@unique([shopId, date, metricType])
}



